<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAQAEBAQAAAAAAAoAQAARgAAABAQAAAAAAAAaAUAAG4BAAAgIBAAAAAAAOgCAADWBgAAICAAAAAA
        AACoCAAAvgkAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACA
        AAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8A////////
        /////////////////3d3////////93///////////////////////////3f/f3//f///d/93eP9n//9n
        9vZnb3Z/92j2h4eHdv/2j3Z4eGb2dv+Gdnh4dvdv//9o///2b//////7v///////////////////////
        //8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKAAAABAAAAAgAAAAAQAIAAAAAABAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A//7+APTe
        zgD68eoA8+jeAOjMsAD17OMA+fLrAPnz7QD69fAA/Pn2AP37+QD+/fwAuHgwANmzigDYtpAA9OrfAPXs
        4gD27uUAqGAIAKhhCQCnYAkAqWEKAKliCwCqYw0AqmQOAKtmEQCsZxMArGcUAK1pFgCtaRcArWoXAK5r
        GQCubBoAr20cALBuHQCwbh4AsG8fALFwIQCxcSIAsnEjALJyJACzcyYAs3QnALN1KAC0dSkAtHYqALR2
        KwC1eC0AtnkvALd6MAC2ejAAtnoxALd7MgC3ezMAt3w0ALh9NgC4fjYAuX83ALl/OAC6gTsAu4I9ALuD
        PgC8hEAAvIVBALyFQgC9hkMAvYdEAL2HRQC+iUcAxY1LAMCLSwDAjEwAwY5PAMGOUADDkVUAw5JVAMST
        VgDFlVoAxpZcAMaXXQDHmWAAyJtjAMmcZQDIm2QAyZxmAMqeaADLoGsAyp9qAMugbADLoW0AzKFuAM2j
        cADMom8AzqVzAM+mdQDPp3YA0Kh4ANKtgADUsIQA1LCFANWyhwDVsogA1bOJANa0igDWtIsA17WNANa1
        jADYuJEA2bmTANu9mADavJcA3L6aANy/nADewqAA3cGfAN/EpADfxaUA4ManAOHIqQDgx6gA48ywAOPM
        sQDkzrMA5c+0AObRtwDn07sA6NW+AOnWwADq2MIA6dfBAOrYwwDr2sUA6tnEAOzcyQDt3swA7t/OAO/h
        0QDw49MA8eXXAPLn2gDz6d0A9OvgAPfw6AD27+cA+PLrAPfx6gD59O4AxJRYAMaZYADOpnQA06+CANWy
        hgDXt48A2bqTANi5kgDdwZ4A3sOhAOHJqwDkzrIA59O6AOjWvwDw5NQA8OTVAPLn2QDx5tgA8+ncAPPq
        3gD17eMA9/HpAPv38gD69vEA/Pn1APv49AD07OEA8OrhAPr28AD9+/gA/Pr3APXz8AD7+PMA/v37AP38
        +gD+/v0A7fz/ANzu8wDr9fgAKMb/AFnU/wDh9/8AMcL/AFzS/wDd9f8AALL/AAW0/wAwwP8Afdj/AMbu
        /wDr+f8A8/v/AP7+/gD9/f0A/Pz8APv7+wD6+voA+fn5APj4+AD39/cA9vb2APX19QD09PQA8/PzAPLy
        8gDx8fEA8PDwAO/v7wDu7u4A7e3tAOzs7ADr6+sA6urqAOfn5wDl5eUA4+PjAOLi4gDh4eEA4ODgAN/f
        3wDe3t4A3d3dANzc3ADa2toA2dnZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wDLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL09vf3+fn5+ff39vT08vLy9Pb29/f5+ff39/b09PLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy2pwy8t8B4XLy8twqMvLy8tfX8sHdV9wWwnLPojLy8vL
        GZ3LGQcZK5gkjXU5hcvLnR1HyxlbcFuYWXxfGcvLyx5Oq34dcEJqRzgdjTGZOcsHVBlwPmpHcE6FOMt/
        K8vLy8vLIlTLu9PLoxkeq8vLy8vLy8sJy7+/y8ujy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACA
        AAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8A////////
        ////////////////////////////////////////////////////////////////////////////////
        /////3d3d3f//////////////3d3d3d3d////////////////3d3////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        //////////92f///d/d/////eP//////dmj//3ZmZn//+Gj//////3Z///92f3aP//9mf/////dmf/hm
        f/92h4Z/hn/////3Zn/3aPhmZndo/3Znf///+GZo92d2h2Z/hn92Zo///3Znh/hnhn+Gf4Z/dmj///+G
        b//2Z3aPdo92h/dm/3/4Zo//dmd2j3aHZmb/Zndv+IaHh3Zndm92Z4Zn/4Zmj//3hmd2Z3aPdo92b/94
        Z/////d/ho////f/dmd3/3//////92aP//////ZmZ/////////eGf/+7v//3Zn//////////////u7//
        /////////////////3t/////////////////////////////////////////////////////////////
        //////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AP/+/gD03s4A+vHqAPPo3gDozLAA9ezjAPny6wD58+0A+vXwAPz5
        9gD9+/kA/v38ALh4MADZs4oA2LaQAPTq3wD17OIA9u7lAKhgCACoYQkAp2AJAKlhCgCpYgsAqmMNAKpk
        DgCrZhEArGcTAKxnFACtaRYArWkXAK1qFwCuaxkArmwaAK9tHACwbh0AsG4eALBvHwCxcCEAsXEiALJx
        IwCyciQAs3MmALN0JwCzdSgAtHUpALR2KgC0disAtXgtALZ5LwC3ejAAtnowALZ6MQC3ezIAt3szALd8
        NAC4fTYAuH42ALl/NwC5fzgAuoE7ALuCPQC7gz4AvIRAALyFQQC8hUIAvYZDAL2HRAC9h0UAvolHAMWN
        SwDAi0sAwIxMAMGOTwDBjlAAw5FVAMOSVQDEk1YAxZVaAMaWXADGl10Ax5lgAMibYwDJnGUAyJtkAMmc
        ZgDKnmgAy6BrAMqfagDLoGwAy6FtAMyhbgDNo3AAzKJvAM6lcwDPpnUAz6d2ANCoeADSrYAA1LCEANSw
        hQDVsocA1bKIANWziQDWtIoA1rSLANe1jQDWtYwA2LiRANm5kwDbvZgA2ryXANy+mgDcv5wA3sKgAN3B
        nwDfxKQA38WlAODGpwDhyKkA4MeoAOPMsADjzLEA5M6zAOXPtADm0bcA59O7AOjVvgDp1sAA6tjCAOnX
        wQDq2MMA69rFAOrZxADs3MkA7d7MAO7fzgDv4dEA8OPTAPHl1wDy59oA8+ndAPTr4AD38OgA9u/nAPjy
        6wD38eoA+fTuAMSUWADGmWAAzqZ0ANOvggDVsoYA17ePANm6kwDYuZIA3cGeAN7DoQDhyasA5M6yAOfT
        ugDo1r8A8OTUAPDk1QDy59kA8ebYAPPp3ADz6t4A9e3jAPfx6QD79/IA+vbxAPz59QD7+PQA9OzhAPDq
        4QD69vAA/fv4APz69wD18/AA+/jzAP79+wD9/PoA/v79AO38/wDc7vMA6/X4ACjG/wBZ1P8A4ff/ADHC
        /wBc0v8A3fX/AACy/wAFtP8AMMD/AH3Y/wDG7v8A6/n/APP7/wD+/v4A/f39APz8/AD7+/sA+vr6APn5
        +QD4+PgA9/f3APb29gD19fUA9PT0APPz8wDy8vIA8fHxAPDw8ADv7+8A7u7uAO3t7QDs7OwA6+vrAOrq
        6gDn5+cA5eXlAOPj4wDi4uIA4eHhAODg4ADf398A3t7eAN3d3QDc3NwA2traANnZ2QAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8Ay8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        09PT09vb29vb29vb29vb29PT09PLy8vLy8vLy8vT09Pb29/f39/n5+fn5+fn59/f39/b29PT08vLy8vL
        09PT29vf39/n5+fn5+fn5+fn5+ff39/b29PT08vLy8vL09PT29vb39/f39/n5+fn39/f39/b29vT09PL
        y8vLy8vLy8vLy9PT09PT09vb29vT09PT09PLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy2oicK3Ly8vLfHwHgIWr
        y8vLy8urcE+oy8vLy8vLy8vLfB0ZRwfLy8txIhkZGTiIy8vLrU4ZVNPLy8vLy8vLy61fGV/Ly9MHCXU4
        X6NwGVvTCQfLrT4eiMvLy8vLy8vLhSsZccutThk+iMsJjV8ZW3xCK3zLWRlwy8vLy8vLy8twGSudB8tx
        GVsHTxkZKxmYfyRCjct1Hjl8hcvLy8vLo0IZJCRPrZgZdZkZQmowGZirTiJ/y3orGRlOrcvLy8udGR1f
        R5jLVBl/Wxlwy1sZmMtZGXyrXysZT8vLy8vLqE8ZOKMJqKg+GYVqGVSrahlZrV8ZVHGtah0rqK2Iy8tP
        HhlOraurfjAdiHAZQgdqGUd1OBkdMY0HMRmZajnLy0dCHkJ8W2p1HjCFmRk4qJkZK3FPGT6Fy8tHGR0Z
        WcvLywdxVDEZcXAZPoVqOUcHcCROy4UeOKjLrX9GK5jLy8vLy8vLfnUHWxlOBwkDB8uoBqPLgCQZfJ11
        y42Iy8vLy8vLy8vLy3wiGVQJy8u7utPLy8ujORkwHpiry8vLy8vLy8vLy8vLhVk4D8vLucC8wL7Ly8uY
        ODBq08vLy8vLy8vLy8vLy8vLy40Jy8vGv8O/wcvLy6ujB8vLy8vLy8vLy8vLy8vLy8vLy8vLy7nFw8XI
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>